# With this the user can use a custom
# python environment, like those created
# with venv or pyenv. The default will be
# the system python.
[virtualenvs]
prefer-active-python = true

# This isn't really needed on pratical aspect
# since this is only for organize the functional tests
# but is necessary since its a requirement for poetry.
[tool.poetry]
name = "floresta-functional-tests"
version = "0.0.1"
description = "collection of tools to help with functional testing of Floresta"
authors = ["The Floresta Project Developers"]
license = "MIT"

# To add a new dependency, use `poetry add <package>`.
# To update, first find outdated packages with `poetry show --outdated`,
# then re-install with `poetry add <package>@<version>`.
[tool.poetry.dependencies]
python = ">=3.12"
jsonrpclib = "^0.2.1"
requests = "^2.32.3"
black = "^24.10.0"
pylint = "^3.3.2"
poethepoet = "^0.31.1"

# Here we can define some custom tasks
# (even bash or rust ones can be defined).
# All of them will run on virtualenv environment.
# For more information, see guidelines in https://poethepoet.natn.io
[tool.poe.tasks]
format = "black ./tests"
lint = "pylint ./tests"
example-test = "python tests/run_tests.py --test-name example_test"
restart-test = "python tests/run_tests.py --test-name restart"
tests = ["example-test", "restart-test"]
pre-commit = ["format", "lint", "tests"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
